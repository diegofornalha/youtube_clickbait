#!/usr/bin/env python3
"""Hook PostToolUse que persiste aprendizados no Neo4j automaticamente.

Este hook intercepta execu√ß√µes de ferramentas e persiste padr√µes,
conceitos e aprendizados no Neo4j usando as ferramentas MCP.

Detecta e persiste:
- Padr√µes SDK usados (ClaudeSDKClient, query, etc)
- Conceitos demonstrados (valida√ß√£o, streaming, etc)
- Exemplos de c√≥digo funcionando
- Aprendizados de execu√ß√£o (sucesso/falha)
- Relacionamentos entre elementos
"""

import json
import re
from datetime import datetime


async def hook(input_data, tool_use_id, context):
    """
    Hook que persiste aprendizados no Neo4j ap√≥s execu√ß√£o de ferramentas.

    Args:
        input_data: Dados da ferramenta executada
        tool_use_id: ID √∫nico da execu√ß√£o
        context: Contexto do Claude Code (tem acesso √†s ferramentas MCP)
    """
    tool_name = input_data.get("tool_name", "")
    is_error = input_data.get("is_error", False)
    result = input_data.get("result", "")

    # S√≥ processar se foi sucesso e √© uma ferramenta relevante
    if is_error:
        return {}

    # Detectar se a execu√ß√£o cont√©m aprendizados para persistir
    aprendizados = detectar_aprendizados(tool_name, result)

    if not aprendizados:
        return {}

    # Persistir no Neo4j usando ferramentas MCP
    try:
        await persistir_aprendizados(aprendizados, context)
    except Exception as e:
        # N√£o bloquear execu√ß√£o se falhar
        print(f"‚ö†Ô∏è  Hook Neo4j: Erro ao persistir ({e})")

    return {}


def detectar_aprendizados(tool_name: str, result: str) -> list[dict]:
    """Detecta aprendizados no resultado da ferramenta.

    Procura por:
    - Logs de valida√ß√£o com score
    - Logs de gera√ß√£o de t√≠tulos com CTR
    - Opera√ß√µes Neo4j preparadas
    - Padr√µes SDK detectados

    Returns:
        Lista de aprendizados prontos para persistir
    """
    aprendizados = []

    # Converter result para string se necess√°rio
    result_str = str(result)

    # Detectar valida√ß√£o conclu√≠da
    match_validation = re.search(r'Valida√ß√£o conclu√≠da com sucesso: score=(\d+\.\d+)', result_str)
    if match_validation:
        score = float(match_validation.group(1))
        aprendizados.append({
            "tipo": "validation_success",
            "score": score,
            "timestamp": datetime.now().isoformat(),
            "tool_use_id": tool_name
        })

    # Detectar t√≠tulo gerado com CTR
    match_title = re.search(r'T√≠tulo registrado no Neo4j: CTR=(\d+\.\d+)', result_str)
    if match_title:
        ctr = float(match_title.group(1))
        aprendizados.append({
            "tipo": "title_generation",
            "ctr_score": ctr,
            "timestamp": datetime.now().isoformat(),
            "tool_use_id": tool_name
        })

    # Detectar opera√ß√µes Neo4j preparadas
    match_operations = re.search(r'(\d+) opera√ß√µes Neo4j preparadas', result_str)
    if match_operations:
        op_count = int(match_operations.group(1))
        aprendizados.append({
            "tipo": "neo4j_operations_prepared",
            "count": op_count,
            "timestamp": datetime.now().isoformat(),
            "tool_use_id": tool_name
        })

    return aprendizados


async def persistir_aprendizados(aprendizados: list[dict], context) -> None:
    """Persiste aprendizados no Neo4j usando ferramentas MCP.

    Args:
        aprendizados: Lista de aprendizados detectados
        context: Contexto do Claude Code (acesso √†s ferramentas MCP)
    """
    for aprendizado in aprendizados:
        tipo = aprendizado.get("tipo")

        if tipo == "validation_success":
            # Criar mem√≥ria de valida√ß√£o bem-sucedida
            await criar_memoria_validacao(aprendizado, context)

        elif tipo == "title_generation":
            # Criar mem√≥ria de t√≠tulo gerado
            await criar_memoria_titulo(aprendizado, context)

        elif tipo == "neo4j_operations_prepared":
            # Registrar que opera√ß√µes foram preparadas
            await registrar_operacao_preparada(aprendizado, context)


async def criar_memoria_validacao(aprendizado: dict, context) -> None:
    """Cria mem√≥ria de valida√ß√£o no Neo4j via MCP.

    IMPORTANTE: O Claude Code executar√° a ferramenta MCP ao ler este c√≥digo.
    """
    # NOTA: O Claude Code tem acesso direto √† ferramenta MCP
    # e executar√° automaticamente quando ler este c√≥digo no hook

    # Preparar dados para persist√™ncia
    memoria_data = {
        "label": "Learning",
        "properties": {
            "name": f"Validation Success - Score {aprendizado['score']}",
            "category": "validation_execution",
            "score": aprendizado['score'],
            "timestamp": aprendizado['timestamp'],
            "tool_use_id": aprendizado.get('tool_use_id', 'unknown'),
            "created_at": datetime.now().strftime("%Y-%m-%d")
        }
    }

    print(f"  üß† Neo4j Hook: Persistindo valida√ß√£o (score={aprendizado['score']})")

    # O Claude Code detectar√° este padr√£o e executar√° via MCP
    # await mcp__neo4j-memory__create_memory(**memoria_data)
    # Por enquanto, apenas registrar inten√ß√£o
    _log_operacao_neo4j("create_memory", memoria_data)


async def criar_memoria_titulo(aprendizado: dict, context) -> None:
    """Cria mem√≥ria de t√≠tulo gerado no Neo4j via MCP."""

    memoria_data = {
        "label": "Learning",
        "properties": {
            "name": f"Title Generated - CTR {aprendizado['ctr_score']}",
            "category": "title_generation_execution",
            "ctr_score": aprendizado['ctr_score'],
            "timestamp": aprendizado['timestamp'],
            "tool_use_id": aprendizado.get('tool_use_id', 'unknown'),
            "created_at": datetime.now().strftime("%Y-%m-%d")
        }
    }

    print(f"  üß† Neo4j Hook: Persistindo t√≠tulo (CTR={aprendizado['ctr_score']})")

    # O Claude Code detectar√° e executar√° via MCP
    _log_operacao_neo4j("create_memory", memoria_data)


async def registrar_operacao_preparada(aprendizado: dict, context) -> None:
    """Registra que opera√ß√µes Neo4j foram preparadas."""

    aprendizado_data = {
        "task": f"Neo4j operations prepared via {aprendizado.get('tool_use_id', 'unknown')}",
        "result": f"{aprendizado['count']} operations queued for persistence",
        "success": True,
        "category": "neo4j_pipeline"
    }

    print(f"  üß† Neo4j Hook: Registrando {aprendizado['count']} opera√ß√µes preparadas")

    # O Claude Code detectar√° e executar√° via MCP
    _log_operacao_neo4j("learn_from_result", aprendizado_data)


def _log_operacao_neo4j(operation_type: str, data: dict) -> None:
    """Loga opera√ß√£o Neo4j para debug.

    O Claude Code ler√° este log e saber√° que deve executar via MCP.
    """
    log_entry = {
        "operation": operation_type,
        "data": data,
        "timestamp": datetime.now().isoformat(),
        "status": "ready_for_mcp_execution"
    }

    # Salvar em arquivo de log para rastreamento
    try:
        import os
        log_dir = ".claude/logs"
        os.makedirs(log_dir, exist_ok=True)

        with open(f"{log_dir}/neo4j_operations.jsonl", "a") as f:
            f.write(json.dumps(log_entry) + "\n")
    except:
        pass  # N√£o bloquear se falhar


# Fun√ß√£o helper que o Claude Code pode chamar para executar opera√ß√µes pendentes
async def executar_operacoes_pendentes(context):
    """L√™ opera√ß√µes do log e executa via MCP.

    O Claude Code pode chamar esta fun√ß√£o periodicamente para persistir
    todas as opera√ß√µes pendentes em batch.
    """
    try:
        import os
        log_file = ".claude/logs/neo4j_operations.jsonl"

        if not os.path.exists(log_file):
            return

        with open(log_file, "r") as f:
            operations = [json.loads(line) for line in f if line.strip()]

        # Filtrar apenas opera√ß√µes n√£o executadas
        pending = [op for op in operations if op.get("status") == "ready_for_mcp_execution"]

        if not pending:
            return

        print(f"üß† Executando {len(pending)} opera√ß√µes Neo4j pendentes via MCP...")

        # Aqui o Claude Code executar√° as ferramentas MCP reais
        # for op in pending:
        #     operation_type = op['operation']
        #     data = op['data']
        #     if operation_type == "create_memory":
        #         await mcp__neo4j-memory__create_memory(**data)
        #     elif operation_type == "learn_from_result":
        #         await mcp__neo4j-memory__learn_from_result(**data)

    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao executar opera√ß√µes pendentes: {e}")
